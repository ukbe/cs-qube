apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.app.name}}
spec:
  replicas: {{.Values.deployment.replicas}}
  selector:
    matchLabels:
      app: cs-qube
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cs-qube
    spec:
      volumes:
        - name: static-files
          persistentVolumeClaim:
            claimName: static-files
        - name: nginx-config
          configMap:
            name: nginx-config
      containers:
        - name: cs-qube
          image: {{.Values.app.image}}
          imagePullPolicy: {{.Values.app.imagePullPolicy}}
          resources:
            requests:
              cpu: {{.Values.app.requests.cpu}}
              memory: {{.Values.app.requests.memory}}
            limits:
              cpu: {{.Values.app.limits.cpu}}
              memory: {{.Values.app.limits.memory}}
          volumeMounts:
            - name: static-files
              mountPath: /app/static
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: cs-qube
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: secret_access_key
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            periodSeconds: 1
            timeoutSeconds: 1
          startupProbe:
            httpGet:
              path: /health
              port: 5000
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 12

        - image: nginx
          imagePullPolicy: Always
          name: nginx
          resources:
            requests:
              cpu: {{.Values.app.requests.cpu}}
              memory: {{.Values.app.requests.memory}}
            limits:
              cpu: {{.Values.app.limits.cpu}}
              memory: {{.Values.app.limits.memory}}
          volumeMounts:
            - name: static-files
              mountPath: /data/static
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              readOnly: true
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            periodSeconds: 2
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 12

      dnsPolicy: ClusterFirst
      restartPolicy: {{.Values.deployment.restartPolicy}}
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: {{.Values.deployment.terminationGracePeriodSeconds}}
